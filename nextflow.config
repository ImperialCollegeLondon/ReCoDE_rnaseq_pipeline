// config defaults
params {

    // workflow options
    outdir                     = "$baseDir/3_nextflow_pipeline_results"
    publish_dir_mode           = 'copy'

    // which steps to run?
    trim = true
    align = true

    // STAR options
    sparse_d = 1

    // default job options
    max_memory                 = '96.GB'
    max_cpus                   = 8
    max_time                   = '72.h'

    // config options
    custom_config_version      = 'master'
    custom_config_base         = "https://raw.githubusercontent.com/nf-core/configs/${params.custom_config_version}"
}

// load base.config by default for all pipelines
includeConfig 'conf/base.config'

// Load nf-core custom profiles from different Institutions
try {
    includeConfig "${params.custom_config_base}/nfcore_custom.config"
} catch (Exception e) {
    System.err.println("WARNING: Could not load nf-core/config profiles: ${params.custom_config_base}/nfcore_custom.config")
}

// profiles for various environments
profiles {
    debug { process.beforeScript = 'echo $HOSTNAME' }

    conda {
        params.enable_conda    = true
        docker.enabled         = false
        singularity.enabled    = false
        podman.enabled         = false
        shifter.enabled        = false
        charliecloud.enabled   = false
    }
    docker {
        docker.enabled         = true
        docker.userEmulation   = true
        process.container      = "jackgisby/ReCoDE_rnaseq_pipeline"
        singularity.enabled    = false
    }
    singularity {
        singularity.enabled    = true
        singularity.autoMounts = true
        process.container      = "jackgisby/ReCoDE_rnaseq_pipeline"
        docker.enabled         = false
    }

    // variables for testing
    test      {includeConfig 'conf/test.config'}
}

// prevent local Python/R libraries from conflicting with those in the container
env {
    PYTHONNOUSERSITE = 1
    R_PROFILE_USER   = "/.Rprofile"
    R_ENVIRON_USER   = "/.Renviron"
}

manifest {
    name            = 'jackgisby/ReCoDE_rnaseq_pipeline'
    author          = 'Jack Gisby'
    homePage        = 'https://github.com/ImperialCollegeLondon/ReCoDE_rnaseq_pipeline'
    description     = 'A parallelised pipeline for the analysis of RNA sequencing data.'
    mainScript      = 'main.nf'
    nextflowVersion = '!>=21.04.0'
    version         = '0.1'
}

// Function to ensure that resource requirements don't go beyond a maximum limit (from nf-core)
def check_max(obj, type) {
    if (type == 'memory') {
        try {
            if (obj.compareTo(params.max_memory as nextflow.util.MemoryUnit) == 1)
                return params.max_memory as nextflow.util.MemoryUnit
            else
                return obj
        } catch (all) {
            println "   ### ERROR ###   Max memory '${params.max_memory}' is not valid! Using default value: $obj"
            return obj
        }
    } else if (type == 'time') {
        try {
            if (obj.compareTo(params.max_time as nextflow.util.Duration) == 1)
                return params.max_time as nextflow.util.Duration
            else
                return obj
        } catch (all) {
            println "   ### ERROR ###   Max time '${params.max_time}' is not valid! Using default value: $obj"
            return obj
        }
    } else if (type == 'cpus') {
        try {
            return Math.min( obj, params.max_cpus as int )
        } catch (all) {
            println "   ### ERROR ###   Max cpus '${params.max_cpus}' is not valid! Using default value: $obj"
            return obj
        }
    }
}
